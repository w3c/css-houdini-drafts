<pre class='metadata'>
Title:  CSS Properties and Values API Level 1
Status: ED
Group: houdini
ED: https://drafts.css-houdini.org/css-properties-values-api-1/
Previous Version: http://www.w3.org/TR/2016/WD-css-properties-values-api-1-20160607/
Shortname: css-properties-values-api
Level: 1
Abstract: This CSS module defines an API for registering new CSS properties. Properties registered using this API are provided with a parse syntax that defines a type, inheritance behaviour, and an initial value.
Editor: Tab Atkins, jackalmage@gmail.com
Editor: Shane Stephens, shanestephens@google.com
Editor: Daniel Glazman, daniel.glazman@disruptive-innovations.com
Editor: Alan Stearns, stearns@adobe.com
Editor: Elliot Sprehn, esprehn@chromium.org
Editor: Greg Whitworth, gwhit@microsoft.com
Ignored Terms: boolean, Animatable, Map, Context, isolated worker, SyntaxError,
Ignored Terms: InvalidModificationError, NotFoundError, StylePropertyMapReadOnly,
Ignored Terms: worklet global scope
Ignored Terms: throw, NotSupportedError, isconstructor, get, iscallable,
Ignored Terms: construct, name map of inputs
Ignored Vars: arguments, methodPropertyKey, inputStyleMap, workletGlobalScope
Ignored Terms: WorkletGlobalContext
Repository: w3c/css-houdini-drafts
</pre>

<pre class='biblio'>
{
  "css-paint-api": {
    "title": "CSS Painting API"
  },
  "css-layout-api": {
    "title": "CSS Layout API"
  }
}
</pre>

<pre class='link-defaults'>
spec:css-transforms-1; type:type; text:<transform-function>
spec:cssom-1; type:interface; text:CSS
</pre>

Introduction {#intro}
=====================

CSS defines a comprehensive set of properties that can be manipulated in order
to modify the layout, paint, or behaviour of a web document. However, web authors
frequently wish to extend this set with additional properties.

[[css-variables]] provides primitive means for defining user-controlled properties,
however these properties always take token lists as values, must always inherit, and
can only impact document layout or paint by being re-incorporated into the value
of other properties via a var() reference.

This specification extends [[css-variables]], allowing the registration of properties
that have a value type, an initial value, and a defined inheritance behaviour.

This specification is complementary to [[css-paint-api]] and [[css-layout-api]], which
allow custom properties to directly impact paint and layout behaviours respectively.

Registering custom properties {#registering-custom-properties}
==============================================================

<pre class='idl'>
dictionary PropertyDescriptor {
  required DOMString name;
           DOMString syntax       = "*";
           boolean   inherits     = false;
           DOMString initialValue;
};

partial interface CSS {
  static void registerProperty(PropertyDescriptor descriptor);
  static void unregisterProperty(DOMString name);
};
</pre>

The {{PropertyDescriptor}} dictionary {#the-propertydescriptor-dictionary}
--------------------------------------------------------------------------

A <dfn>PropertyDescriptor</dfn> dictionary represents author-specified configuration
options for a custom property. {{PropertyDescriptor}} dictionaries contain the
following members:

:   <dfn dict-member for=PropertyDescriptor>name</dfn>
::  The name of the custom property being defined.

:   <dfn dict-member for=PropertyDescriptor>syntax</dfn>
::  A string representing how this custom property is parsed.

:   <dfn dict-member for=PropertyDescriptor>inherits</dfn>
::  True if this custom property should inherit down the DOM tree; False otherwise.

:   <dfn dict-member for=PropertyDescriptor>initialValue</dfn>
::  The initial value of this custom property.

The {{registerProperty()}} function {#the-registerproperty-function}
--------------------------------------------------------------------

The <dfn method for=CSS>registerProperty(PropertyDescriptor descriptor)</dfn> method
registers a custom property according the to configuration options provided in
<code>descriptor</code>.

Attempting to register properties with a {{PropertyDescriptor/name}} that doesn't
correspond to the <<custom-property-name>> production must cause {{registerProperty()}}
to throw a {{SyntaxError}}.

The list of types supported in the {{PropertyDescriptor/syntax}} member are listed
in <a section href="#supported-syntax-strings"></a>. Currently, only simple
type references are supported. Attempting to register properties with a
{{PropertyDescriptor/syntax}} that is not supported must cause {{registerProperty()}}
to throw a {{SyntaxError}}.

Note: for example, the syntax string could be "&lt;length&gt;" or "&lt;number&gt;".

Note: in future levels we anticipate supporting more sophisticated parse strings, e.g.
"&lt;length&gt; || &lt;number&gt;"

Attempting to call {{registerProperty()}} with an {{PropertyDescriptor/initialValue}} that is
not parseable using the provided {{PropertyDescriptor/syntax}} must cause it to
throw a {{SyntaxError}}. If no {{PropertyDescriptor/initialValue}} is provided and the
{{PropertyDescriptor/syntax}} is '*', then a special initial value used. This initial
value must be considered parseable by {{registerProperty()}} but invalid at computed
value time. Initial values that are not computationally idempotent must also cause
{{registerProperty()}} to throw a {{SyntaxError}}.

<div class='example'>
For example, "3cm" is a computationally idempotent length, and hence valid as an initial value.
However, "3em" is not (depending on the environment, 3em could compute to
multiple different values). Additionally, "var(--foo)" is not computationally idempotent.
</div>

Issue: define computational idempotency.

Issue(121): Is computational idempotency the right thing to do here? We could also just
resolve any relative values once (against all the other initial values) and use
that. OR! We could allow specified values and just fix our engines...

When a custom property is registered with a given type, the process via which specified
values for that property are turned into computed values is defined
fully by the type selected, as described in
<a section href="#calculation-of-computed-values"></a>.

If {{registerProperty()}} is called with a descriptor name that matches an already registered property,
then an {{InvalidModificationError}} is thrown and the re-registration fails.

Properties can be unregistered using
<dfn method for=CSS>unregisterProperty(DOMString name)</dfn>.
If this function is called with a name that doesn't match an existing property
then a {{NotFoundError}} is thrown.

Successful calls to both {{registerProperty()}} and {{unregisterProperty()}}
change the set of registered properties. When the set of registered properties
changes, previously syntactically invalid property values can become valid and vice versa.
This can change the set of <a>declared values</a> which requires the <a>cascade</a> to
be recomputed.

<div class='example'>
By default, all custom property declarations that can be parsed as a sequence of tokens
are valid. Hence, the result of this stylesheet:

<pre class='lang-css'>
.thing {
  --my-color: green;
  --my-color: url("not-a-color");
  color: var(--my-color);
}
</pre>

is to set the color property of elements of class "thing" to "inherit".
The second --my-color declaration overrides the first at parse time (both are valid),
and the var reference in the color property is found to be invalid at computation time
(because <code>url("not-a-color")</code> is not a color). At computation time the only
available fallback is the default value, which in the case of color is "inherit".

if we call:

<pre class='lang-javascript'>
registerProperty({
name: "--my-color",
syntax: "&lt;color>"
});
</pre>

then the second --my-color declaration becomes syntactically invalid, which means that
the cascade uses the first declaration. The color therefore switches to green.

</div>

Supported syntax strings {#supported-syntax-strings}
----------------------------------------------------

The following syntax strings are supported:

:   "&lt;length>"
::  Any valid <<length>> value
:   "&lt;number>"
::  <<number>> values
:   "&lt;percentage>"
::  Any valid <<percentage>> value
:   "&lt;length-percentage>"
::  Any valid <<length>> or <<percentage>> value, any valid <<calc()>>
    expression combining <<length>> and <<percentage>> components.
:   "&lt;color>"
::  Any valid <<color>> value
:   "&lt;image>"
::  Any valid <<image>> value
:   "&lt;url>"
::  Any valid <<url>> value
:   "&lt;integer>"
::  Any valid <<integer>> value
:   "&lt;angle>"
::  Any valid <<angle>> value
:   "&lt;time>"
::  Any valid <<time>> value
:   "&lt;resolution>"
::  Any valid <<resolution>> value
:   "&lt;transform-function>"
::  Any valid <<transform-function>> value
:   "&lt;custom-ident>"
::  Any valid <<custom-ident>> value
:   Any string, the contents of which matches the <<ident>> production
::  That identifier
:   Any one of the preceding strings, followed by '+'
::  A list of values of the type specified by the string
:   Any combination of the preceding, separated by '|'
::  Any value that matches one of the items in the combination, matched in specified order.
:   "*"
::  Any valid token stream

Note: [[css3-values]] maintains a distinction between properties that accept
only a length, and properties that accept both a length and a percentage,
however the distinction doesn't currently cleanly line up with the productions.
Accordingly, this specification introduces the length-percentage production
for the purpose of cleanly specifying this distinction.

Regardless of the syntax specified, all custom properties will accept
<a>CSS-wide keywords</a> as well as ''revert'', and process these values
appropriately.

Note: This does not apply to the {{PropertyDescriptor/initialValue}} member
of the {{PropertyDescriptor}} dictionary.

<div class='example'>
For example, the following are all valid syntax strings.

:   <code>"&lt;length>"</code>
::  accepts length values
:   <code>"&lt;length> | &lt;percentage>"</code>
::  accepts lengths, percentages, percentage calc expressions, and length calc
    expressions, but not calc expressions containing a combination of length
    and percentage values.
:   <code>"&lt;length-percentage>"</code>
::  accepts all values that <code>"&lt;length> | &lt;percentage>"</code> would
    accept, as well as calc expressions containing a combination of both length
    and percentage values.
:   <code>"big | bigger | BIGGER"</code>
::  accepts the ident "big", or the ident "bigger", or the ident "BIGGER".
:   <code>"&lt;length>+"</code>
::  accepts a list of length values.

</div>

Calculation of Computed Values {#calculation-of-computed-values}
----------------------------------------------------------------

The syntax of a custom property fully determines how computed values are
generated from specified values for that property.

The <a>CSS-wide keywords</a> and ''revert'' generate computed values as
described in [[!css3-values]] and [[!css-cascade-4]] respectively. Otherwise:

For &lt;length> values, the computed value is the absolute length expressed in pixels.

For &lt;length-percentage> values, the computed value is one of the following:
*   if the specified value contains only length units, the computed value is the absolute length
    expressed in pixels.
*   if the specified value contains only percentages, the computed value is a
    simple percentage.
*   otherwise, the computed value is a calc expression containing an absolute
    length expressed in pixels, and a percentage value.

For &lt;custom-ident>, ident, &lt;color>, &lt;image>, &lt;url>, &lt;integer>,
&lt;angle>, &lt;time>, &lt;resolution>, &lt;transform-function> or "*" values, the
computed value is identical to the specified value.

For &lt;number> and &lt;percentage> values which are not calc expressions, the
computed value is identical to the specified value. Calc expressions that are
&lt;number> and &lt;percentage> values get reduced during computation to simple
numbers and percentages respectively.

For values specified by a syntax string that include "|" clauses, the computed
value is given by applying the calculation rules for the first clause that
matches to the specified value.

For list values, the computed value is a list of the computed values of the
primitives in the list.

Behavior of Custom Properties {#behavior-of-custom-properties}
==============================================================

Animation Behavior of Custom Properties {#animation-behavior-of-custom-properties}
----------------------------------------------------------------------------------

Note: As defined by [[css3-animations]] and [[css3-transitions]], it is possible to
specify animations and transitions that reference custom properties.

When referenced by animations and transitions, custom properties interpolate
in a manner defined by their types.
If the start and end of an interpolation have matching types, then they
will interpolate as specified in [[!css3-animations]].
Otherwise, the interpolation falls back to the default 50% flip described in
[[!css3-animations]].

Issue: Intermediate interpolated results of animations on custom properties must
be able to generate a token stream representing their value. We should ensure that
this is standard across implementations to avoid interop issues.

Conditional Rules {#conditional-rules}
--------------------------------------

''@supports'' rules and the {{CSS/supports(conditionText)}} method behave as specified
in [[!css-variables]].

Note: In other words, for the purpose of determining whether a value is
supported by a given custom property, the type registered for the custom property is
ignored and any value consisting of at least one token is considered valid.

Issue(118): should @supports pay attention to type when considering custom properties?

Examples {#examples}
====================

Example 1: Using custom properties to add animation behavior {#example-1}
-------------------------------------------------------------------------

<pre class='lang-markup'>
&lt;script&gt;
CSS.registerProperty({
  name: "--stop-color",
  syntax: "&lt;color&gt;",
  inherits: false,
  initialValue: "rgba(0,0,0,0)"
});
&lt;/script&gt;

&lt;style&gt;

.button {
  --stop-color: red;
  background: linear-gradient(var(--stop-color), black);
  transition: --stop-color 1s;
}

.button:hover {
  --stop-color: green;
}

&lt;/style&gt;

</pre>

Security Considerations {#security-considerations}
==================================================

There are no known security issues introduced by these features.

Privacy Considerations {#privacy-considerations}
==================================================

There are no known privacy issues introduced by these features.
